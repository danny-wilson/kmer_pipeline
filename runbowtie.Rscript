#!/usr/bin/env Rscript

# Start time
start.time = proc.time()[3]
args = commandArgs(trailingOnly=TRUE)

help = c("runbowtie.Rscript map kmers to a reference genome using bowtie2",
			"Usage: runbowtie.Rscript output_prefix analysis_dir kmerfilePrefix ref_fa kmer_type kmer_length software_file [bowtie_parameters samtools_filter]")


if(length(args!=0)){
	if(args[1]=="-help" | args[1]=="-h"){
		cat(help,sep="\n")
		q("no")
	}
}

if(length(args)!=7 & length(args)!=9){
	cat(help,sep="\n")
	cat("Received arguments: ", args, "\n")
	stop("\nIncorrect usage\n")
}

###################################################################################################
##Â Functions and software paths
###################################################################################################

###################################################################################################

# # Initialize variables
output_prefix = as.character(args[1])
output_dir = as.character(args[2])
kmerfilePrefix = as.character(args[3])
ref_fa = as.character(args[4])
kmer_type = as.character(args[5])
kmer_length = as.integer(args[6])
software_file = as.character(args[7])
if(length(args)>7){
	bowtie_parameters = as.character(args[8])
	samtools_filter = as.integer(args[9])
} else {
	bowtie_parameters = "--very-sensitive"
	samtools_filter = 10
}

# Check input arguments
if(!file.exists(output_dir)) stop("Error: output directory doesn't exist","\n")
if(unlist(strsplit(output_dir,""))[length(unlist(strsplit(output_dir,"")))]!="/") output_dir = paste0(output_dir, "/")
kmerSeqFile = paste0(kmerfilePrefix, ".kmermerge.txt.gz")
if(!file.exists(kmerSeqFile)) stop("Error: kmer sequence file doesn't exist","\n")
if(!file.exists(ref_fa)) stop("Error: reference fasta file doesn't exist","\n")
if(kmer_type!="protein" & kmer_type!="nucleotide") stop("Error: kmer type must be either 'protein' or 'nucleotide'","\n")
if(is.na(kmer_length)) stop("Error: kmer length must be an integer","\n")
if(!file.exists(software_file)) stop("Error: software file doesn't exist","\n")
if(bowtie_parameters!="--very-sensitive"){
	if(!file.exists(bowtie_parameters)) stop("Error: bowtie_parameters file doesn't exist","\n")
	bowtie_parameters = scan(bowtie_parameters, what = character(0), sep = "\n")
}

# Read in software file
software_paths = read.table(software_file, h = T, sep = "\t", quote = "")
# Required software and script paths
# Begin with software
required_software = c("bowtie2","samtools")
if(any(is.na(match(required_software, as.character(software_paths$name))))) stop(paste0("Error: missing required software path in the software file - requires ",paste(required_software, collapse = ", ")),"\n")
bowtie2Dir = as.character(software_paths$path)[which(tolower(as.character(software_paths$name))=="bowtie2")]
if(!dir.exists(bowtie2Dir)) stop("Error: bowtie2 installation directory specified in the software paths file doesn't exist","\n")
bowtie2path = file.path(bowtie2Dir,"bowtie2")
if(!file.exists(bowtie2path)) stop("Error: bowtie path",bowtie2path," doesn't exist","\n")
bowtie2buildpath = file.path(bowtie2Dir,"bowtie2-build")
if(!file.exists(bowtie2buildpath)) stop("Error: bowtie2-build path",bowtie2buildpath," doesn't exist","\n")
samtoolspath = as.character(software_paths$path)[which(tolower(as.character(software_paths$name))=="samtools")]
if(!file.exists(samtoolspath)) stop("Error: samtoolspathpath specified in the software paths file doesn't exist","\n")

# Report variables
cat("#############################################", "\n")
cat("Running on host: ",system("hostname", intern=TRUE),"\n")
cat("Command line arguments","\n")
cat(args, "\n\n")
cat("Parameters:","\n")
cat("Output prefix:", output_prefix,"\n")
cat("Analysis directory:", output_dir,"\n")
cat("Kmer file prefix:", kmerfilePrefix,"\n")
cat("Reference fasta file:", ref_fa, "\n")
cat("Kmer type:", kmer_type, "\n")
cat("Kmer length:", kmer_length, "\n")
cat("Software file:", software_file, "\n")
cat("bowtie2 directory:", bowtie2Dir,"\n")
cat("Bowtie2 parameters:", bowtie_parameters, "\n")
cat("Samtools path:", samtoolspath,"\n")
cat("#############################################", "\n\n")


# Get name of reference genome
ref.name = scan(ref_fa, what = character(0), sep = "\n", nlines = 1, quiet = TRUE)
ref.name = unlist(strsplit(ref.name, " "))[1]
if(substr(ref.name,1,1)!=">") stop("Error: reference fasta file does not begin with a name starting with '>'","\n")
ref.name = substr(ref.name,2,1e6)

# Create directory
bowtie_dir = paste0(output_dir, "/", kmer_type, "kmer", kmer_length, "_bowtie2mapping")
if(!dir.exists(bowtie_dir)) dir.create(bowtie_dir)

# Move to output directory
setwd(bowtie_dir)
# Create bowtie reference
stopifnot(system(paste0(bowtie2buildpath, " -f ", ref_fa, " ", ref.name, "_bowtie_ref"))==0)

# Run bowtie
cat("\n")
cat("Running bowtie with the parameters:", bowtie_parameters, "\n")
bowtie_outfile = paste0(output_prefix, "_", kmer_type, kmer_length, "_map_to_", ref.name)
stopifnot(system(paste0(bowtie2path, " ", bowtie_parameters, " -r -x ", ref.name, "_bowtie_ref -U ", kmerSeqFile, " -S ", bowtie_outfile))==0)

# Run samtools
samtools_outputfile = paste0(output_dir, output_prefix, "_", kmer_type, kmer_length, ".", ref.name, ".SAMq",samtools_filter, ".bowtie2map.txt")
stopifnot(system(paste0(samtoolspath, " view -q ", samtools_filter , " -S ", bowtie_outfile, " > ", samtools_outputfile))==0)
stopifnot(system(paste0("gzip ", samtools_outputfile))==0)
stopifnot(system(paste0("gzip ", bowtie_outfile))==0)

cat("Completed in",(proc.time()[3]-start.time)/60,"minutes\n")
